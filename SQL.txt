-- 1. Find all books written by the author "Haruki Murakami"
SELECT * FROM Books WHERE author = 'Haruki Murakami';

-- 2. Retrieve the titles and authors of books belonging to the genre "Fiction"
SELECT title, author FROM Books WHERE genre_id = (SELECT genre_id FROM Genre WHERE name = 'Fiction');

-- 3. Retrieve all information about books written by American authors and belonging to the genre "Science Fiction"
SELECT * FROM Books WHERE author IN (SELECT name FROM Authors WHERE nationality = 'American') AND genre_id IN (SELECT genre_id FROM Genre WHERE name = 'Science Fiction');

-- 4. Find the names and email addresses of customers who purchased the book titled "Norwegian Wood"
SELECT name, email FROM Customers WHERE customer_id IN (SELECT customer_id FROM Sales WHERE book_id = (SELECT book_id FROM Books WHERE title = 'Norwegian Wood'));

-- 5. Add a column "description" in the Genre table
ALTER TABLE Genre ADD COLUMN "description" VARCHAR(255);

-- 6. Drop column "description" from Genre table
ALTER TABLE Genre DROP COLUMN "description";

-- 7. Modify column Phone_number from Employees table
ALTER TABLE Employees MODIFY COLUMN phone_number VARCHAR(20);

-- 8. Remove Sales table from Database
DROP TABLE Sales;

-- 9. Delete a column from Inventory table
ALTER TABLE Inventory DROP COLUMN available;

-- 10. Update the price of books written by Haruki Murakami to $15.99
UPDATE Books SET price = 15.99 WHERE author = 'Haruki Murakami';

-- 11. Delete an inventory entry from the Inventory table
DELETE FROM "Inventory" WHERE inventory_id = 401;

-- 12. Retrieve the IDs of books that are available in inventory or have been sold for a price greater than $1000
SELECT book_id FROM Inventory WHERE available = true UNION SELECT book_id FROM Sales WHERE total_price > 1000;

-- 13. Find the IDs of books that are currently in inventory and were sold between January 1st, 2024 and January 31st, 2024
SELECT book_id FROM Inventory WHERE quantity > 0 INTERSECT SELECT book_id FROM Sales WHERE sale_date BETWEEN TO_DATE('2024-01-01', 'YYYY-MM-DD') AND TO_DATE('2024-01-31', 'YYYY-MM-DD');

-- 14. List the authors of books that were sold within the specified date range
SELECT DISTINCT author FROM Books WHERE book_id IN (SELECT DISTINCT book_id FROM Sales WHERE sale_date BETWEEN TO_DATE('2024-01-01', 'YYYY-MM-DD') AND TO_DATE('2024-01-31', 'YYYY-MM-DD'));

-- 15. Query to Get Total Sales by Employee
WITH TotalSales AS (
    SELECT employee_id, SUM(total_price) AS total_sales
    FROM Sales
    GROUP BY employee_id
)
SELECT e.name AS employee_name, ts.total_sales
FROM TotalSales ts
JOIN Employees e ON ts.employee_id = e.employee_id;

-- 16. Query to Get Available Books
WITH AvailableBooks AS (
    SELECT book_id, SUM(quantity) AS total_quantity
    FROM Inventory
    WHERE available = 1
    GROUP BY book_id
)
SELECT b.title, b.author, ab.total_quantity
FROM AvailableBooks ab
JOIN Books b ON ab.book_id = b.book_id;

-- 17. Find the most expensive book
SELECT * FROM Books WHERE price = (SELECT MAX(price) FROM Books);

-- 18. Show all customers from 123 Main St who have made a purchase
SELECT * FROM Customers WHERE (customer_id IN (SELECT DISTINCT customer_id FROM Sales)) AND (address = '123 Main St');

-- 19. Show all books that are either in stock or have a price less than $15.00
SELECT * FROM Books WHERE (book_id IN (SELECT book_id FROM Inventory)) OR (price < 15.00);

-- 20. Show all employees who are not managers and were hired after January 1, 2020
SELECT * FROM Employees WHERE (position != 'Manager') AND (hire_date > TO_DATE('2020-01-01', 'YYYY-MM-DD'));

-- 21. Retrieve the titles and authors of books from the "Books" table where the title contains the phrase "Nor"
SELECT title, author FROM Books WHERE title LIKE '%Nor%';

-- 22. Create a view named "BookDetails" that displays the title, author, and price of books from the "Books" table
CREATE VIEW BookDetails AS SELECT title, author, price FROM Books;

-- 23. Insert and set default value to Inventory table using PL/SQL
SET SERVEROUTPUT ON;
DECLARE
    inventory_id Inventory.inventory_id%TYPE := 106;
    book_id Inventory.book_id%TYPE := 105;
    quantity Inventory.quantity%TYPE := 25;
    available Inventory.available%TYPE := TRUE;
BEGIN
    INSERT INTO Inventory (inventory_id, book_id, quantity, available)
    VALUES (inventory_id, book_id, quantity, available);
    DBMS_OUTPUT.PUT_LINE('Row inserted successfully into Inventory table.');
END;
/

-- 24. Use PL/SQL row type to fetch an employee from Employees table
SET SERVEROUTPUT ON;
DECLARE
    emp_row Employees%ROWTYPE;
BEGIN
    BEGIN
        SELECT employee_id, name, email, phone_number, position, hire_date
        INTO emp_row.employee_id, emp_row.name, emp_row.email, emp_row.phone_number, emp_row.position, emp_row.hire_date
        FROM Employees
        WHERE employee_id = 603;
        
        -- Print employee details
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_row.employee_id);
        DBMS_OUTPUT.PUT_LINE('Name: ' || emp_row.name);
        DBMS_OUTPUT.PUT_LINE('Email: ' || emp_row.email);
        DBMS_OUTPUT.PUT_LINE('Phone Number: ' || emp_row.phone_number);
        DBMS_OUTPUT.PUT_LINE('Position: ' || emp_row.position);
        DBMS_OUTPUT.PUT_LINE('Hire Date: ' || TO_CHAR(emp_row.hire_date, 'YYYY-MM-DD'));
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('No employee found with ID 603.');
    END;
END;
/

-- 25. Use PL/SQL cursor and row_count to retrieve data from Books table
SET SERVEROUTPUT ON;
DECLARE
    CURSOR book_cursor IS SELECT * FROM Books;
    book_row Books%ROWTYPE;
BEGIN
    OPEN book_cursor;
    FETCH book_cursor INTO book_row.book_id, book_row.title, book_row.author, book_row.genre_id, book_row.price, book_row.publication_date;
    WHILE book_cursor%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE('Book ID: ' || book_row.book_id || ', Title: ' || book_row.title || ', Author: ' || book_row.author || ', Genre ID: ' || book_row.genre_id || ', Price: ' || book_row.price || ', Publication Date: ' || book_row.publication_date);
        DBMS_OUTPUT.PUT_LINE('Row count: ' || book_cursor%ROWCOUNT);
        FETCH book_cursor INTO book_row.book_id, book_row.title, book_row.author, book_row.genre_id, book_row.price, book_row.publication_date;
    END LOOP;
    CLOSE book_cursor;
END;
/

-- 26. Use PL/SQL FOR LOOP/WHILE LOOP/ARRAY with extend() function to retrieve data from Genre table
SET SERVEROUTPUT ON;
DECLARE
    counter NUMBER;
    TYPE NAMEARRAY IS VARRAY(5) OF Genre.name%TYPE;
    A_NAME NAMEARRAY := NAMEARRAY();
BEGIN
    FOR x IN 1..5
    LOOP
        A_NAME.EXTEND();
        CASE x
            WHEN 1 THEN A_NAME(x) := 'Fiction';
            WHEN 2 THEN A_NAME(x) := 'Mystery';
            WHEN 3 THEN A_NAME(x) := 'Science Fiction';
            WHEN 4 THEN A_NAME(x) := 'Romance';
            WHEN 5 THEN A_NAME(x) := 'Fantasy';
        END CASE;
    END LOOP;
    
    FOR i IN A_NAME.FIRST..A_NAME.LAST
    LOOP
        DBMS_OUTPUT.PUT_LINE('Genre Name: ' || A_NAME(i));
    END LOOP;
END;
/

-- 27. Retrieve data from Authors table using IF/ELSE/ElSEIF
SET SERVEROUTPUT ON;
DECLARE
    counter NUMBER := 1;
    author_name2 Authors.name%TYPE;
    TYPE NAMEARRAY IS VARRAY(5) OF Authors.name%TYPE;
    A_NAME NAMEARRAY := NAMEARRAY('Haruki Murakami', 'Harper Lee', 'George Orwell', 'F. Scott Fitzgerald', 'Jane Austen');
BEGIN
    FOR x IN A_NAME.FIRST..A_NAME.LAST
    LOOP
        SELECT name INTO author_name2 FROM Authors WHERE name = A_NAME(x);
        IF author_name2 = 'Haruki Murakami' THEN
            DBMS_OUTPUT.PUT_LINE(author_name2 || ' was born in Japan');
        ELSIF author_name2 = 'Harper Lee' THEN
            DBMS_OUTPUT.PUT_LINE(author_name2 || ' was born in America');
        ELSIF author_name2 = 'George Orwell' THEN
            DBMS_OUTPUT.PUT_LINE(author_name2 || ' was born in the United Kingdom');
        ELSIF author_name2 = 'F. Scott Fitzgerald' THEN
            DBMS_OUTPUT.PUT_LINE(author_name2 || ' was born in America');
        ELSE
            DBMS_OUTPUT.PUT_LINE(author_name2 || ' was born in the United Kingdom');
        END IF;
    END LOOP;
END;
/

-- 28. Use PL/SQL procedure to update and print data from Books table
CREATE OR REPLACE PROCEDURE proc_update_book_price(
    book_id_param IN NUMBER,
    new_price IN NUMBER
)
AS
BEGIN
    UPDATE Books SET price = new_price WHERE book_id = book_id_param;
    DBMS_OUTPUT.PUT_LINE('Price updated successfully for Book ID: ' || book_id_param);
END;
/

-- 29. Use PL/SQL function to retrieve data from Customers table
CREATE OR REPLACE FUNCTION get_customer_details(
    customer_id_param IN NUMBER
) RETURN VARCHAR2
AS
    customer_details VARCHAR2(1000);
BEGIN
    SELECT 'Name: ' || name || ', Email: ' || email INTO customer_details FROM Customers WHERE customer_id = customer_id_param;
    RETURN customer_details;
END;
/

-- 30. Create a trigger to update Inventory after any change in Sales table
CREATE OR REPLACE TRIGGER update_inventory_after_sale
AFTER INSERT ON Sales
FOR EACH ROW
DECLARE
    v_book_id Books.book_id%TYPE;
BEGIN
    v_book_id := :NEW.book_id;
    UPDATE Inventory
    SET quantity = quantity - 1
    WHERE book_id = v_book_id;
END;
/
